#!/usr/bin/env bash

############################################################################################
################################### Configurable Settings: #################################
#Domain Name:
UNIFI_HOSTNAME="unifi.example.com"
#Force Mode:
FORCE=false
#Verbose Mode:
VERBOSE=false
#Logfile location:
LOGFILE="/var/log/unifi-os-server-ssl-import.log"
############################################################################################

set -euo pipefail

# Parse arguments
for arg in "$@"; do
    case $arg in
        --force) FORCE=true ;;
        --verbose) VERBOSE=true ;;
        *)
            echo "❌ Unknown argument: $arg"
            echo "Usage: $0 [--force] [--verbose]"
            exit 1
            ;;
    esac
done

# Logging control
if [[ "$VERBOSE" == false ]]; then
    exec > >(tee -a "$LOGFILE") 2>&1
else
    echo "📣 Verbose mode enabled."
fi

# Function to run commands cleanly
run_command() {
    if [[ "$VERBOSE" == true ]]; then
        "$@"
    else
        "$@" &> /dev/null
    fi
}

echo "=============================="
echo "🔐 UniFi SSL Import Script"
echo "🕒 Run at: $(date)"
echo "=============================="

if [[ "$FORCE" == true ]]; then
    echo "⚠️  FORCE mode enabled: Will replace certificate even if unchanged."
fi

LE_LIVE_DIR="/etc/letsencrypt/live"
CERT_DIR="${LE_LIVE_DIR}/${UNIFI_HOSTNAME}"
DEST_KEY="/home/uosserver/.local/share/containers/storage/volumes/uosserver_data/_data/unifi-core/config/unifi-core.key"
DEST_CERT="/home/uosserver/.local/share/containers/storage/volumes/uosserver_data/_data/unifi-core/config/unifi-core.crt"
COMBINED_MD5_FILE="${CERT_DIR}/cert_bundle.md5"

echo "📂 Checking required certificate files in ${CERT_DIR}..."
for file in cert.pem chain.pem privkey.pem; do
    if [[ ! -f "${CERT_DIR}/${file}" ]]; then
        echo "❌ Missing ${file}. Aborting."
        exit 1
    fi
done
echo "✅ All required files found."

CURRENT_SUM=$(cat "${CERT_DIR}/privkey.pem" "${CERT_DIR}/cert.pem" "${CERT_DIR}/chain.pem" | md5sum | awk '{print $1}')
echo "🔍 Current cert bundle MD5: $CURRENT_SUM"

if [[ "$FORCE" == false && -f "${COMBINED_MD5_FILE}" ]]; then
    OLD_SUM=$(<"${COMBINED_MD5_FILE}")
    echo "📑 Previous cert bundle MD5: $OLD_SUM"

    if [[ "$CURRENT_SUM" == "$OLD_SUM" ]]; then
        echo "✅ Certificate unchanged. No update necessary."
        exit 0
    fi
fi

echo "🔁 Certificate changed or --force used. Proceeding with update."

# Stop UniFi controller (cleanly)
echo -n "🛑 Stopping UniFi Controller... "
run_command uosserver stop
echo "done."

# Backup existing files
if [[ -f "${DEST_KEY}" ]]; then
    echo -n "📦 Backing up key... "
    run_command cp -v "${DEST_KEY}" "${DEST_KEY}.bak"
    echo "✅"
fi

if [[ -f "${DEST_CERT}" ]]; then
    echo -n "📦 Backing up cert... "
    run_command cp -v "${DEST_CERT}" "${DEST_CERT}.bak"
    echo "✅"
fi

# Copy key
echo -n "📥 Installing new key... "
run_command cp -v "${CERT_DIR}/privkey.pem" "${DEST_KEY}"
echo "✅"

# Combine certs
echo -n "🧬 Assembling new certificate... "
if [[ "$VERBOSE" == true ]]; then
    cat "${CERT_DIR}/cert.pem" "${CERT_DIR}/chain.pem" > "${DEST_CERT}"
else
    cat "${CERT_DIR}/cert.pem" "${CERT_DIR}/chain.pem" > "${DEST_CERT}" 2>/dev/null
fi
echo "✅"

# Set permissions
echo -n "🔐 Setting permissions... "
chmod 600 "${DEST_KEY}" "${DEST_CERT}"
chown uosserver:uosserver "${DEST_KEY}" "${DEST_CERT}" 2>/dev/null || echo "⚠️ chown failed"
echo "✅"

# Save new checksum
echo "$CURRENT_SUM" > "${COMBINED_MD5_FILE}"
echo "💾 Updated cert checksum saved."

# Show cert details
echo "📋 Installed cert details:"
openssl x509 -in "${DEST_CERT}" -noout -subject -issuer -serial -enddate

# Restart controller
echo -n "🚀 Starting UniFi Controller... "
run_command uosserver start
echo "done."

echo "✅ Done! SSL cert installed and controller restarted."
exit 0
